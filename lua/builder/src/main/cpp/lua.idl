
interface LuaState {
    void LuaState();
    void createContext();
    void destroyContext();

    // #### BEGIN LOW LEVEL LUA METHODS

    void x_lua_absindex(long idx);
    void x_lua_arith(long op);
    long x_lua_checkstack(long n);
    long x_lua_compare(long index1, long index2, long op);
    void x_lua_concat(long op, long n);
    void x_lua_copy(long fromidx, long toidx);
    void x_lua_createtabble(long narr, long nrec);
    long x_lua_error();
    long x_lua_getfield(long index, [Const] DOMString k);

    long x_lua_getglobal([Const] DOMString name);
    long x_lua_geti(long index, long long i);
    long x_lua_getmetatable(long index);
    long x_lua_gettable(long index);
    long x_lua_gettop();
    long x_lua_getiuservalue(long index, long n);
    void x_lua_insert(long index);
    long x_lua_isboolean(long index);
    long x_lua_iscfunction(long index);
    long x_lua_isfunction(long index);
    long x_lua_isinteger(long index);
    long x_lua_islightuserdata(long index);
    long x_lua_isnone(long index);
    long x_lua_isnoneornil(long index);
    long x_lua_isnumber(long index);
    long x_lua_isstring(long index);
    long x_lua_istable(long index);
    long x_lua_isthread(long index);
    long x_lua_isuserdata(long index);
    long x_lua_isyieldable();
    void x_lua_len(long index);

    void x_lua_newtable();

    long x_lua_next(long index);

    void x_lua_pop(long n);
    void x_lua_pushboolean(long b);

    void x_lua_pushfstring([Const] DOMString fmt);
    void x_lua_pushglobaltable();
    void x_lua_pushinteger(long long n);

    void x_lua_pushlstring([Const] DOMString s, long len);
    void x_lua_pushnil();
    void x_lua_pushnumber(double n);
    void x_lua_pushstring([Const] DOMString s);
    long x_lua_pushthread();
    void x_lua_pushvalue(long index);

    long x_lua_rawequal(long index1, long index2);
    long x_lua_rawget(long index);
    long x_lua_rawgeti(long index, long long n);

    void x_lua_rawset(long index);
    void x_lua_rawseti(long index, long long i);

    void x_lua_remove(long index);
    void x_lua_replace(long index);
    long x_lua_resetthread(long index);
    void x_lua_rotatee(long index, long n);

    void x_lua_setfield(long index, [Const] DOMString k);
    void x_lua_setglobal(long index, [Const] DOMString name);
    void x_lua_seti(long index, long long n);
    long x_lua_setiuservalue(long index, long n);
    long x_lua_setmetatable(long index);
    void x_lua_settable(long index);
    void x_lua_settop(long index);

    long x_lua_status();
    unsigned long x_lua_stringtonumber([Const] DOMString s);
    long x_lua_toboolean(long index);

    void x_lua_toclose(long index);
    long long x_lua_tointeger(long index);

//    const char* x_lua_tointeger(long index, size_t* len);
    double x_lua_tonumber(long index);

//    const char* x_lua_tostring(long index);

    long x_lua_type(long index);
//    const char* x_lua_typename(long tp);

    long x_lua_upvalueindex(long i);
    double x_lua_version();
    void x_lua_warning([Const] DOMString msg, long tocont);

    long  x_lua_yield(long nresults);

    // #### END LOW LEVEL LUA METHODS

    void collectGarbage();

    void script(DOMString code);
    long getOrInt(DOMString key, long otherwise);
    float getOrFloat(DOMString key, float otherwise);
    boolean getOrBool(DOMString key, boolean otherwise);
//    DOMString getOrString(DOMString key, DOMString otherwise);

    void setInt(DOMString key, long value);
    void setFloat(DOMString key, float value);
    void setBool(DOMString key, boolean value);
    void setString(DOMString key, DOMString value);

    void registerFunction(DOMString key, LuaFunction callback);
};

interface LuaFunction {
    void onCall(LuaState luaState);
};

[JSImplementation="LuaFunction"]
interface LuaFunctionImpl {
    void LuaFunctionImpl();
    long onCall(LuaState luaState);
};
