
interface LuaState {
    void LuaState();

    // #### BEGIN LOW LEVEL LUA METHODS

    void x_lua_absindex(long idx);
    void x_lua_arith(long op);
    long x_lua_checkstack(long n);
    long x_lua_compare(long index1, long index2, long op);
    void x_lua_concat(long op, long n);
    void x_lua_copy(long fromidx, long toidx);
    void x_lua_createtabble(long narr, long nrec);
//    long x_lua_error();
    long x_lua_getfield(long index, [Const] DOMString k);

    long x_lua_getglobal([Const] DOMString name);
    long x_lua_geti(long index, long long i);
    long x_lua_getmetatable(long index);
    long x_lua_gettable(long index);
    long x_lua_gettop();
    long x_lua_getiuservalue(long index, long n);
    void x_lua_insert(long index);
    long x_lua_isboolean(long index);
    long x_lua_iscfunction(long index);
    long x_lua_isfunction(long index);
    long x_lua_isinteger(long index);
    long x_lua_islightuserdata(long index);
    long x_lua_isnil(long index);
    long x_lua_isnone(long index);
    long x_lua_isnoneornil(long index);
    long x_lua_isnumber(long index);
    long x_lua_isstring(long index);
    long x_lua_istable(long index);
    long x_lua_isthread(long index);
    long x_lua_isuserdata(long index);
    long x_lua_isyieldable();
    void x_lua_len(long index);

    void x_lua_newtable();

    any x_lua_newuserdatauv(unsigned long size, long nuvalue);
    long x_lua_next(long index);

    void x_lua_call(long nargs, long nresults);
    long x_lua_pcall(long nargs, long nresults, long msgh);

    void x_lua_pop(long n);
    void x_lua_pushboolean(long b);

    // Upvalue starts at index 2
    void x_lua_pushcclosure(LuaFunction callback, long n);
    void x_lua_pushcfunction(LuaFunction callback);
    [Const, Value] IDLString x_lua_pushfstring([Const] DOMString fmt);
    void x_lua_pushglobaltable();
    void x_lua_pushinteger(long long n);
    void x_lua_pushlightuserdata(any n);
//    IDLString x_lua_pushliteral([Const] DOMString s);
    [Const, Value] IDLString x_lua_pushlstring([Const] DOMString s, long len);
    void x_lua_pushnil();
    void x_lua_pushnumber(double n);
    void x_lua_pushstring([Const] DOMString s);
    long x_lua_pushthread();
    void x_lua_pushvalue(long index);

    long x_lua_rawequal(long index1, long index2);
    long x_lua_rawget(long index);
    long x_lua_rawgeti(long index, long long n);

    void x_lua_rawset(long index);
    void x_lua_rawseti(long index, long long i);

    void x_lua_remove(long index);
    void x_lua_replace(long index);
    long x_lua_resetthread(long index);
    void x_lua_rotatee(long index, long n);

    void x_lua_setfield(long index, [Const] DOMString k);
    void x_lua_setglobal([Const] DOMString name);
    void x_lua_seti(long index, long long n);
    long x_lua_setuservalue(long index);
    long x_lua_setiuservalue(long index, long n);
    long x_lua_setmetatable(long index);
    void x_lua_settable(long index);
    void x_lua_settop(long index);
//    void lua_setwarnf (lua_State *L, lua_WarnFunction f, void *ud);
    long x_lua_status();
    unsigned long x_lua_stringtonumber([Const] DOMString s);
    long x_lua_toboolean(long index);
//    lua_CFunction lua_tocfunction (lua_State *L, int index);
    void x_lua_toclose(long index);
    long long x_lua_tointeger(long index);
//    lua_Integer lua_tointegerx (lua_State *L, int index, int *isnum);
//    [Const, Value] IDLString x_lua_tolstring(long index, size_t* len);
    double x_lua_tonumber(long index);
//    lua_Number lua_tonumberx (lua_State *L, int index, int *isnum);
//    const void *lua_topointer (lua_State *L, int index);
    [Const, Value] IDLString x_lua_tostring(long index);
//    lua_State *lua_tothread (lua_State *L, int index);
    any x_lua_touserdata(long index);
    long x_lua_type(long index);
    [Const, Value] IDLString x_lua_typename(long tp);
    long x_lua_upvalueindex(long i);
    double x_lua_version();
    void x_lua_warning([Const] DOMString msg, long tocont);

    long  x_lua_yield(long nresults);

    // ### LUAL methods

    long x_luaL_loadstring([Const] DOMString s);

    void x_luaL_error([Const] DOMString fmt);
    void x_luaL_argerror(long arg, [Const] DOMString extramsg);

    void x_luaL_checkversion();

    long x_luaL_newmetatable([Const] DOMString tname);
    long x_luaL_getmetafield(long obj, [Const] DOMString e);
    long x_luaL_getmetatable([Const] DOMString tname);
    long x_luaL_getsubtable(long idx, [Const] DOMString fname);

    long long x_luaL_len(long index);

    void x_luaL_pushfail();

    long x_luaL_ref(long t);
    void x_luaL_unref(long t, long ref);
    long x_luaL_typeerror(long arg, [Const] DOMString tname);

    // #### END LOW LEVEL LUA METHODS

    void createContext();
    void destroyContext();

    void stackDump();

    static void setIntToVoid(any pointer, long value);
    static long getIntFromVoid(any pointer);
};

interface LuaFunction {
    void onCall(LuaState luaState);
};

[JSImplementation="LuaFunction"]
interface LuaFunctionImpl {
    void LuaFunctionImpl();
    long onCall(LuaState luaState);
};
